 CEOs realize that their customer engagement models have changed with COVID-19, and some have changed forever. As organizations have migrated from a traditional technology stack to an application and infrastructure environment that includes cloud, multi-cloud containers, Kubernetes, microservices, this environment is so much more complex and so much more dynamic than a traditional technology stack. When you have an issue, it can be rather like a murder mystery trying to find out what the issue is. So organizations that are doing microservices, they think about how can we pull together all of the information in context to better understand problems if and when they occur. And it has a bunch of new and different requirements in terms of trying to be able to figure out what's going on. It requires a new approach to monitoring. One of the key tenets of observability is really building systems that are designed to be observed and managed accordingly. And the way I like to think about it is that it's really a love letter to your future self or perhaps to someone on your team. It's really thinking about wait a second. Let's try and ensure that the outputs are going to be those that can help us to solve problems. If you were to be an observability vendor, I think there's a couple of key things that you're going to end up having to offer in order to meet demand from customers. So one is scale because especially as end users are in these cloud native environments, they're collecting a much bigger volume of operations data. So you have to be able to scale to be able to affordably collect that volume of data. A tool has to collect different types of data as well because there's increasing recognition that there's value in metrics and distributed traces and events and logs and errors. So you have to be able to collect all these different types of data within a single system. You've also got to have pretty sophisticated analytics. Then correlating that of course with business metrics, other kinds of metrics, so that the people that matter are the people that you can help from a customer service perspective. Or a couple of things from a product standpoint, first and foremost, full stack visibility, really having an opportunity to collect metrics, logs, traces, external and internal information, really bring it all together in context of an application service or a system. We've also found that this whole theme of it's not just about operational data, but collecting business data, understanding the nuances of the dependencies of different data components of a system. Got observability natives and others that are probably doing some observability washing. So certainly if we look at vendors across a number of spaces, certainly distributed tracing, logging and metrics, all of those vendors are repositioning around this observability notion. You have all of these different kinds of tools, different categories of tools out there. And that creates some problems for end users in terms of being able to correlate data that's collected and siloed within these different tools. And then you've got a new set of players that have come in and they're really thinking about observability in a different kind of way, where they're coming out of the notion as I say of troubleshooting and they're coming out observability very much in terms of understanding the behavior of a system from its outputs. Dealing with organizations and helping them to have a new way of working. And why are executives thinking about this? Well, the business drivers. This is really about reliability and customer experience. When we start telling together some of that infrastructure information and the telemetry around the infrastructure or applications are running, what's stuff that we're seeing in places like GitHub where we could take the social coding information and really begin to understand who checks something in, when they check something in, and you can begin to correlate system information with human telemetry. And I think that is really interesting. One of the things I want to start seeing from observability then just going forward, because that's really where the puck is going, I think.