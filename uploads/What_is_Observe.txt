 Thanks for watching the Observe launch. Now this is our second launch, and we're going to focus a little bit less on the company today and more on new product features and some of our amazing customers. If you're new to Observe, the first thing that you should know is that we're taking a very different approach. Recent research by the 4.5.1 group shows that organizations use seven tools to troubleshoot and monitor their applications. They've got many tools because they have fragmented data. We believe that Observability is fundamentally a data problem. If we can solve that, the tools problem will take care of itself. Now you'll often hear vendors talk about Observability as three pillars, logs, metrics, and traces. When we look at the customer experience in using these tools, we find that the DevOps team is spent in all of their time doing Ops, tasks like tagging and archiving data. There appears to be not much dev in DevOps these days. Too much effort is going below what I call the value line, and the SRE and engineering teams don't see enough value. There's got to be a different approach. With Observe, we flip the iceberg. We use a commercial database snowflake as our underlying data store, so a lot of those operational tasks just fundamentally disappear. Our engineering team focuses their effort like above the value line. This enables more users, including roles such as customer success, to do what they really want to do, which is to understand and analyze their application. Now what's our approach to delivering all of this value? The most fundamental step is putting all of the telemetry data in one place. After all, it's 2021, and cloud storage is practically free. If your data isn't in one place, it becomes really hard to relate the piece parts, which is critical to providing context, which is critical to observability. Now, the magic in the system is that the raw data, it's messy, it's machine generated, it's gobbledygook, it's not understandable by humans. Conventional wisdom is to provide users with a search bar and have them go looking for breadcrumbs. We think that that's a terrible starting point, and so we transform the machine data into something called the Observe Data Universe. Event data is curated into things called resources that users understand. These are things like customers and shopping carts and pods and containers. No other product has this abstraction layer, and it allows us to do something pretty amazing. Most importantly, Observe establishes relationships between these resources. This allows users to quickly locate additional contextual information for the problem that they're looking at. The user can navigate the graph using our grappling feature without knowing the exact path between the nodes. Let's now talk about some of the new features in Observe. When we looked at the state of the art in systems that analyze metrics, we found them to be confusing, often presenting hundreds or thousands of metrics and tags to the user. If you knew the metric that you wanted to look at, you were all set, but if you didn't, you were never going to find it. Users get lost in their own tag soup. We wanted to change the game. Observe curates metrics. Curates metrics. So that users only see the metrics that are relevant to the part of the system that they're looking at. In this example, a view of the customer were seeing average response times, error counts, and the number of tickets that they've raised. If we want to add something more to the dashboard, we just drag and drop it from a curated list. And because the user only sees relevant metrics, they're not overwhelmed. Let's turn our attention now to alerts. Alerts aren't new in concept, but it's amazing how unwieldy they are to deal with, even today. Too many inboxes are filled with too many alerts that contain too little information. As systems become more complex, something has to change. Like metrics, observes implementation is a game changer. Our alerts feature relevant contextual information, so the user knows exactly where to start their investigation. Now, we can do this because of the data universe, the graph of connected data sets that exists behind the scenes. In this example, we're alerting on errors in application logs, but we also know exactly which customers are affected. Why? Because the customer's resource is linked to the application logs. Now, speaking of customers, we've made great strides with our early customer since last October. I'm pleased to announce that we have over 20 paying customers that use Observe on a daily basis. We're part of our founding customer program, and helping us define the product roadmap. I want to say a big word of thanks to all of those customers for their trust in Observe at this early stage. And finally, a word about our pricing model, which I believe again is another game changer. Our pricing is usage-based, so customers only pay us when they're using the system. Even better, we itemize bills right down to individual data sets. Imagine if you got an electrical bill, and it itemized the top 10 appliances that were consuming electricity in your house. That would be a beautiful thing. That's exactly what we do. We believe in usage-based pricing, but we also believe in being fully transparent with where the money is going. Thanks so much for your time today. I really appreciate you tuning into the update. After this break, we'll be back to hear from the Observe founders on what they were thinking when they were implementing many of these new features. Thank you for your time.