 The focus of today's talk is quite simply the observability cloud. For the very first time, Observe is bringing together all the capabilities you've been asking for into one single integrated product, everything from log analytics to monitoring to dashboarding, distributed tracing and much, much more. We also built Observe on top of a modern cloud-native architecture, which delivers an order of magnitude improvement in economics. We believe that there's never been a better time to introduce the observability cloud. Recent research shows that 58% of businesses moving to the cloud have lost visibility into their operations. At the same time, they're seeing a 40% increase in data volume, pushing costs through the roof. Let's start today with our unique approach. Unlike anyone else, we ingest all event data into a data lake. Then, also, unlike anyone else, we curate that event data into a data graph. Finally, we democratize access through data apps, enabling a broad range of users to get up and running in minutes. Let's drill into the data lake. Quite simply, we ingest anything and everything that looks like an event. That's logs, metrics, traces for sure, but also zendex tickets, Salesforce customer interactions, and Jenkins build information. And we don't use proprietary agents to collect your data. We rely 100% on open source. The data lake is based on AWS S3, and we compress data 10x on average, making it insanely cheap. Next, we make the magic happen. We curate the event data into a graph of connected data sets. No one has anything like this. Simply put, data sets are things that users want to ask questions about. That could be containers or S3 buckets, but it could also be customers or shopping carts. And then observe relates the data sets. This means that during an investigation, users can immediately navigate to related context. This is critical for investigating unknown issues, a common occurrence in today's world of microservice based apps and continuous delivery. Because data sets represent real things, we can track how the state of those things are changing over time. This is important because modern systems are ephemeral, they're constantly changing. And so it's essential to be able to reconstitute the state of the system at any point in time. Finally, let's talk about data apps, which promise to democratize access to event data. Everyone, from customer success to support, to DevOps and SRE, to engineering, should have access. Observe provides apps for the most common infrastructure components, such as Kubernetes, AWS, GCP, and Azure. And observe enables you to easily create equivalent apps to observe your own distributed applications. What's in an app? The short answer is everything you need to observe your distributed application. That means dashboards alert, search, and all of your data sets. Many of these components are available in competitive offerings, but in observe, they're much, much better. For example, almost everyone has dashboards. They pull together metrics to provide an overview of the health of an application. Observe can do that too. But because observe has better data, we deliver better dashboards. Observe dashboards are driven by a data set graph, which means that when we see a spike, we can drill down and retain context as we do it. Maybe we're only showing the customers that are experienced an error in the last hour. And if we suspect it's a problem with the infrastructure, we can drill into only see the health of the pods that emitted the error. And we can keep drilling to show maybe only the container logs emitted by those pods. Similarly, pretty much everyone has alerts. They fire when, for example, errors are detected in container logs. And observe has got alerts too. But because observe has better data, we're able to deliver better alerts. Instead of just showing a threshold condition has been exceeded, you can now show the impact of the blast radius of perhaps which customers have been affected. Observe can do this because observe alerts are based on the data set graph. Pretty much everyone has an ability to search events. This example, you've probably seen 100 times before diving in millions of container logs to look for errors. Observe can do that too. But because observe has better data, we're able to deliver better search. We give container log search results, but we also give you relevant contextual information, such as the pod names. And for more information about those pods, like the restart count, you're just to click away. Observe can do this because search is based on the data set graph, and it contains all the relevant contextual information. Finally, the observability cloud is based on a modern architecture. Observe separates storage and compute, which changes the economics of observability. For ingest, you simply pay for AWS S3, and don't forget that the data is compressed 10x. And you also pay for the compute you consume when you query observe. Computers are elastic, so you only pay when you're using the system, and it's built to the near a second. Architecture matters. Now, only does observe scale, the more it scales, the more you save. In our benchmarking, observe is 10x lower cost than leading competitors at scale. This example is from a typical host monitoring environment, but this one is from a Kubernetes logging environment. As you can see, the shape of the chart is exactly the same. At scale, observe has an order of magnitude cost advantage. What we've seen and what businesses really care about is how price scales with data volume. Most incumbent offerings scale linearly. That means that as their data volume increases 10x, the price increases 10x. Incumbent offerings have a legacy architecture, and if you want proof of that, just look at the price list. We believe that the observability cloud is going to improve observability for you by a factor of three. Imagine lowering MTTR3x, but we're also going to give you a 10x improvement in cost, depending on your use case. That's the observability cloud, and it's available today.