 My name's Ethan Lilly and the engineering manager over here at Topgolf. I've been at Topgolf for two and a half years now. When I was growing up, the stars was the 90s. They were just making it big here in Dallas and they ended up winning the Cup in 99 and that's when I really got into hockey. I used to just play out in the street with some of my friends. It's one of the few sports I'm actually decent at. I mean, I always grew up around computers. I don't even remember the first computer we had. So I've been heavy into technology my whole life thanks to my dad that we're going to rate the NV into it himself. Our main mission is creating moments that matter. People do things like gender reveal parties or they do proposals at Topgolf. Any manner of big life event, we also have top-tracer technology which traces the flight of the ball and we can use that to do all kinds of things. This year we put out an Angry Birds game. You can actually play Angry Birds with a golf ball which is pretty crazy. Things that I've been working on since I joined is moving things to Kubernetes, more modern Docker orchestration engine. When I first started programming how it's on, we were maybe pushing updates to production six months to a year. That was pretty much our cadence and whenever we did it, it was very painful. And then over time, I've seen shows to quicker and quicker release cycles, smaller and smaller chunks getting pushed out to here at Topgolf. We're now on a weekly cadence. We push updates every single week. The four rules are mostly elastic search for centralizing a lot of our logging information. We're limited to what Kibana would allow us to do which they have some capabilities with dashboards and visualizations but we mainly use it just to dig through logging. Kibana uses a different search syntax called Lucine which is very annoying to use. It's like regular expressions but it's not which is really annoying for people. I would never really advertise it to anybody. Observe helps us to monitor the game system and the integrations with our POS system for giggling the checks. We send a lot of data. We send over 1.25 billion of insid day and all of that data is anything from a ball going into a target or a pendant light changing for a day or a new reservation coming in. What we've really gained with Observe is the ability to link our data from different data sources and ways that we never could before. Being able to link the data better between just our microservices alone and including different things like infrastructure with service now, with all these different platforms that we use that we wouldn't have even thought of on Game Before. We've also been exploring different ways to get more data into the platform before where previously we were trying to figure out ways to stop sending data because it was costing so much money. It's saving us time. It's allowing us to more quickly resolve escalations which is better for our guests. Nobody who wants to be sitting around waiting for some IT get to fix your problem. Before it was like a cat. We had this cat that had its own mind and wanted to do what it wanted to do and no matter what I wanted it to do with it matter. But now it's like having a dog. It's your buddy, he'll help you out when you ask him and he's not too complicated.