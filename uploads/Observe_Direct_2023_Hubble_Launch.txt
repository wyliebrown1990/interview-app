 Welcome to the launch of our latest generation of Observe. With me today is astrophysicist Dr. Erica Hamden, who's also engaged in a launch of our own. Erica, the internal codename for our release is Project Hubble. So our project is called the faint, intergalactic medium, redshifted emission balloon, or fireball for sure. Okay, well you definitely outnamed us. Now we've been working on Observe for five years, and Project Hubble allows our customers to discover things they've never seen before, at a scale they thought impossible. So we've been working on Project Fireball for the last 15 years. Okay, you beat us again there. We use Fireball to observe some of the faintest structures known, huge clouds of hydrogen gas that we think flow into and out of galaxies. So we're both looking for things that are hard to find. Your universe is full of stars and gases, and hours is full of data. Seems like there's a lot of similarities between our two launches. Yeah, they're definitely our surprising similarities. Okay, so let's explore that a little bit more later, and for now let's go do a company update. This is a big day for Observe and our customers. This is the largest and most ambitious release to date. We're also announcing today our latest funding, $50 million in Series A3, led by Sutter Hill Ventures. This money will be predominantly used to expand our sales team. We've already hit our sales plan for this fiscal year, and a seeing at growth accelerate. That growth is showing up in our usage statistics. Our platform is now ingesting almost 200 terabytes a day, and we're issuing almost 55 million snowflake queries per day, representing over 1.5% of their daily query volume. Hubble introduces a 100% new user interface. Dozens of feedback sessions and months of usability testing have led us to this point. We've always had incredible power in our platform, and with this release, we've made sure that power users right the way down to the most junior users can be productive. Productivity is not just about our new user interface. We fully embraced generative AI in all of our troubleshooting workflows. With Hubble, we don't just have a chatbot that can explain error messages and how to perform common tasks. It can write regular expressions. It can even act as an assistant during incidents. Reading alerts, navigating to relevant logs and metrics, and summarizing current status, conclusions, and timelines. This is just the start. We've scratched the surface of what can be achieved with generative AI, and believe that rich and structured nature of our metadata gives us a competitive advantage. Now, speaking of competitive advantage, let's talk about our platform. Hubble moves us beyond the magical one petabyte a day barrier in a single workspace, no matter what the size of the organization, observe can handle it. At the same time, we've been working to reduce latency, introducing a new live capability in our explorers, which allow the user to query data just 15 to 20 seconds after it was created. Finally, observe is opening up. We've introduced a new public API so that our platform can be accessed programmatically. We have a new command line interface, and we can share data in and out using snowflake data sharing. With Hubble, observe has never been as productive, as able to ingest as much data, query in as little time, and as easy to share data with other users and applications. It's our biggest and best release ever, and it's available for you to try in our new free trial at observing.com. I believe that Fireball's insights ultimately will enable us to answer the question of how our own galaxy was formed. Now, it's great to talk about the successes of new telescopes and all their discoveries after the fact, but the reality is that with any ambitious project like this, there are a lot of failures. Fireball, we had mirror problems, cooling system issues, calibration failures, and failures from sources we couldn't possibly have predicted in advance. We even had an angry baby falcon land on our spectrograph one day. I know it comes as no surprise to all of you when I say that software fails too, probably more often than you'd like. And that's where Observe comes in. Observe knows that failures will happen and is prepared to support you when that happens. Let's hear how they've been helping TopGolf troubleshoot incidents faster, because no one likes it when angry bird crashes. Hi, my name's Ethan Lilly. I'm a senior engineering manager here at TopGolf, and I've been here for about four and a half years, and I love it here. It's a great place to work. Observeability is very important to us at TopGolf. Technology is what drives the whole venue. If if any one piece goes down, it could affect the entire player experience from the games to getting into your bay, to just making a reservation online. So we have to make sure everything is up and running at all times. So before we used to have to use multiple tools, I used to have three monitors up in my desk with different tools open all at the same time, trying to correlate this time stamp over here with this time stamp over here. But with Observe, it's all in one place, and you can see it all in one view, and you don't have to jump around different monitors. You can just easily click through the UI and find exactly what you're looking for. Observe, we knew right away that this tool was different. This tool is very helpful in giving us the data we need and correlating that data for us. So Observe is much easier to use than other tooling, and it definitely gets us up and running faster and keeps us that way. One of our favorite games at Topgolf is Angry Birds. Players will hit their ball and will use camera systems to track the ball flight and then overlay that onto the game so that it tracks your bird flies exactly the same path as your ball. We had an issue at one of our venues where some of the balls were not getting traced properly. So using Observe, we were able to correlate the game log data with our hardware metrics and figure out that there was a misconfiguration on the back end infrastructure. After fixing it, players were able to once again hit the balls and let the birds fly. At Topgolf, we continue to add new venues every year. Each new venue comes with a whole new set of data. With Observe, we're able to keep our data for up to a year, which allows us to monitor that data over an extended period of time and show us different trends that may be appearing that we may not have noticed before. Before we used to have to pay per user for people to access our monitoring data, with Observe, we can have as many users as we want, allowing us to give access to everyone that we would like to see our data, including our support teams, our development teams, and anybody else that we think might be useful. We needed a solution that would scale with us and Observe is that solution. Over the past six months, we've become obsessed with ease of use in a new user experience and observe. We've conducted dozens of user interviews and live usability tests that have made major improvements to observe UI based on this feedback. I'd like to share a few of these improvements with you now. First, I'm excited to announce our new log explorer UI. The log explorer is intended to be a one-stop destination to browse, search, and analyze all of your log data. When you come to the log explorer, you can quickly flip between all of the log sources being sent to Observe. You can easily search for errors and other keywords, and you can visualize the results of your search all without leaving this one page. Because all data and Observe is linked together, you can also drill in on these log messages to see additional context, like the configuration of related resources or even related metrics. After finding the log data you're looking for, you can share a link with a colleague, create a monitor to watch for errors, or add your visualization to a dashboard. The log explorer UI is driven by a new query builder, which was designed specifically for working with log data. This means that you can access all of this functionality without learning or using a new query language. Along with the log explorer, we've also introduced a new metric explorer UI. The metric explorer is intended to be a first-class destination to find, plot, and analyze all of your metrics data. You can quickly search and browse all of your metrics with a metric picker. After picking a metric, you can use the metric expression builder to configure filters and aggregations for plotting your metrics. You can then drill in on these charts and quickly pivot to any related logs and dashboards. Once you're satisfied with your chart, you can share with others, you can create a monitor, or you can add it to a dashboard. Like the log explorer, all of these actions can be accomplished without using a query language, so new users can settle in quickly. For both of these explorers, we had two goals in mind. We wanted to streamline the adoption of Observe for users migrating from existing open source commercial monitoring tools. These new experiences should feel familiar and intuitive to new users no matter where you're coming from. Second, we wanted to make it even easier to take advantage of Observe's unique ability to link and correlate all of your data together through connected resources. That is, anytime you see a user, a service, or a container, and Observe, it should be as simple as clicking on it to navigate to related logs, metrics, traces, and dashboards. Now, in addition to the new explorers, we've also revamped the navigation bar in the product to make dashboards, monitors, and ingest configuration easier to access. We've introduced a customizable homepage to help you organize content for your team. We've updated dashboard editor with a new focus editing mode, and much, much more. I'm excited for you to try the new Hubble UI. The light sensor, the detector, is the heart of any telescope. I've been working on detector development since 2008, and when our first sensor worked, it was glorious. And now our sensors are 10 times better than the previous state of the art. We get very excited when new technology comes along because it gives us a new way to see the universe and our place in it. One of the best things about new technology is that sometimes we find things we weren't even looking for in the first place. The latest and greatest innovation in the world of tech is AI. I'm sure you've heard about how large language models are going to change your life for the better. Observe believes that AI is going to improve user productivity somewhere between 20 and 50%. Enabling users to get to those new insights faster than ever before. To discover things they didn't even know they needed. Here's John, along with another Erica with a C, not a K, to explain exactly how. When Siri and Alexa came out, they changed how we interact with our devices. Now that generative AI, like chat GPT, is available, it's changing how we interact with our tools. All EGPT is observed generative AI assistance to help users troubleshoot incidents faster. Observe users can ask questions in plain English using a familiar chatbot interface to fetch data, extract fields, and make sense of error messages and much more. All EGPT can even act as an assistant for on-call engineers to remedi an incident via Slack. All EGPT answers users questions about how to perform common tasks such as finding relevant data sets or what configuration to use in order to ingest permeteous metrics. Hundreds of users summon all EGPT on a weekly basis. And with the Hubble release, we have fine-tuned it on our latest documentation and best practices. With Hubble, all EGPT provides users with more data insights. For example, highlighting an error message in a log now explains that error message regardless of source. Go language or web server or Kubernetes. In addition, new logs often arrive unstructured, so users may have to write complex reject statements to parse them before they can even perform analytics. This can be a nerve-wracking experience during an incident when time is precious. All EGPT not only generates the rejects, but also names the resulting columns appropriately, such as URL or status code. With Hubble, all EGPT is now able to act as an incident assistant within Slack. The incident assistance can read observ alerts surfaced in a Slack channel and take the user to relevant log lines, inspect patterns, and help the user get to the root cause. It can even page the right on-call engineer if required. New users joining the incident Slack channel now benefit from an all EGPT generated incident summary. And when the incident is resolved, the conclusion and a timeline is generated for post-modern use. All EGPT can also save these summaries for future reference. So if an error comes back, the hard-earned learnings are right there. In addition, you can upload your own runbooks, so help can be specific to your own context. Another use of generative AI is OpalColePilot that was introduced earlier this year. New users can now learn, observes powerful query language, Opal, much more quickly than before. A user who observe can type something like search errors and logs, count by container, and chart it. Then immediately see and run, degenerated OpalCode. To power OpalColePilot, we trained a private language model which not only reduces hallucinations, but it also improves performance and security. Customer data is held within Observe and is not accessible by third parties. More applications are using LLMs every day, so observing the data pipelines, feeding those LLMs is becoming an important use case. Observes open III application provides out-of-the-box content so users can understand latency, error rates, and accuracy of responses that the LLM is providing. All EGPT and OpalColePilot use generative AI to provide a natural language interface for users to troubleshoot incidents. The rich contextual data in Observe makes it easier for generative AI to connect the dots for users and assist their troubleshooting through a familiar chatbot interface. The Hubble release is a big step, but also the first step in leveraging this revolutionary technology. Sometimes people have a scientific question, and there's no way to answer it with existing telescopes. That's the only reason you should build a new telescope because there is no other way to get the data that you need. Fireball hangs on a cable from a giant balloon and observes for one night only from 130,000 feet, because reaching the edge of space is much cheaper than going to actual space. My ultimate goal, what I really want, is to take our view of the universe from one based on observing the easiest thing, only the light from stars and galaxies, to one where we can see and measure every atom that exists. That's all that I want to do. But more seriously, a complete view of a system, in my case, a galaxy and all the atoms in its environment, is the only way to really understand what is happening. Similarly, observe has a unique perspective on observability. They want users to be able to see and analyze all the telemetry data that exists and do it economically. To do that, they needed a new architecture. Here's Chi, their head of engineering, to explain exactly how they've done it. In Hubble, observe scaled its core engine in data loading, query performance and data management to meet the enterprise requirements of today and tomorrow. First, data loading. Observe already loads hundreds of terabytes data a day for production users. To plan for their future expansion, we have added parallel inserts and time-partition tables to scale to over one petabyte a day. With Hubble, we are also introducing live mode, which helps incidents on core immediately see the effect of a fix. We added this feature with all and all switches for each log and metric data stream. The production data freshness is now down to 20 seconds or less. Our next update will take the number further down to below five seconds. Second, query performance. Hubble has added search indexes to speed up needle in haystack searches. Queries that in the past took minutes. Now take a few seconds. In addition, the OPPO language have been expanded to include a new text search syntax for predicates and references to contextual data. Trend aligns and a few distribution of logs often point to the next investigation steps. We call these stats. Hubble's sampling technology makes stats queries an order of magnitude more efficient, which makes it easier to perform analytics on large data volumes. When serious incidents happen, hundreds of engineer query logs non-stop at the same time. Many exist in two or fails this challenge. To solve this problem, Hubble supports more than 2,000 concurrent users. Furthermore, the engine dynamically utilized snowflake warehouse up to six excel in total 512 machines in size as appropriate. Third, data management. Enterprise cloud environments are becoming more complex. In order to handle this, Hubble also adds fine-grained user access control, multi-side fail-safe, and settings to manage freshness of the data. We have seen many enterprise adopt a data lake strategy for low-cost long-term storage. We believe that observability data should be integrity part of it. To support this, Hubble enables data to be both directly loaded from parkway format files in a data lake, and for enriched data to be shared back to data lake without copying. I'm very proud of the Hubble release. It is our largest and most impactful release to date, and is now ready for prime time in supporting the most demanding workloads. Like any leader and being a leader in this organization, when you have a bunch of engineers that have to use a tool, the easier it is to use that tool saves the company really a ton of money. And we move so fast here. It's a rocket ship over here. We're moving so fast. It's crazy. And we didn't have time to have to devote really learning observe. It was really easy to learn right out of the box. Another thing you guys have incorporated into your observability tool is AI. I can ask a question, and instead of it giving me a link to a document, it takes the steps from the document and just prints them out. I thought that was brilliant. We want to do that. Troubleshooting is great. It's fast and easy, and it doesn't matter what part of the organization is doing the troubleshooting. It has learned how to do it in a very similar way. It's really nice. One thing that did happen, we did have an accidental data spike. Our data went from two or three terabytes a data, ten terabytes a day. And the system didn't even hiccup. It just kept running. It always had. The speed was there. Everything was there. But one of the things that is the most special part about this product I have to say is your customer support is... It is beyond stellar. It's amazing. But my big fear was going to be the cost. Because we were... To Kubernetes, I know the logs and Kubernetes are just... They're huge, right? When you go from bare metal to Kubernetes, your logs triple and quadruple. And when we looked at the price, I really couldn't believe it. It was a fair price. It would easily ramp up our ability to do observability. And it gave us some really great tools. All of these things have really married me to this product. I can't see using another observability tool. It gives us everything we need. The support is just stellar. It is first class. Thanks for joining us for today's launch. I hope you learned a little about Observe's latest and greatest innovations. And a little bit about just how awesome space telescopes are as well. And how effective, new technology and an openness to discovery are crucial for finding out how the universe around you works. I know many of you spend your days investigating failures in distributed applications. Remember, failure is inevitable when you take on ambitious challenges and push the limits of knowledge. But that's what we're both doing. Hopefully with Observe and all the innovations from Project Hubble, you can more quickly overcome those failures and improve the experience you're providing for your customers. Thanks for watching and stay curious. Thanks for watching. Thanks for watching.