 Welcome. Deeply innovative metrics. That's DIM for short. The metrics you never expected to see until at least 60 years in the future. If you're a crack-adjac technologist, then you rely on metrics on a daily basis. Any modern metrics you've got, you can't just go to the market and buy them. The tech-based metrics you've got are the key to your knowledge. You rely on metrics on a daily basis. Any modern metrics platform needs these key components. My capable technical assistant, young Jason here, will help me illustrate these for you on our giant, easy to comprehend dashboard. The DIM platform includes all the key requirements you crave. Must have for every Rockstar 10X FullStack Engineer. First, you'll need a dedicated, wonkybite, scale in memory database. You'll need real-time processing because the bank company's too silly. So make sure you have wonkybites of memory on hand. Remember, it's VC money you're spending so cost should never be an object. To analyze your metrics, we don't use a modern, popular language. There are nowhere near expressive enough. So we invented a simpler language just for you. DIMQL. How about that? Algebraically correct and so simple. A fifth grader can use it. Well, that's all the time we have for now. But tune into our next show when we'll talk about dashboards, complex tagging systems, and alerts, more and more DIF, deeply innovative metrics. Hello. My name is Annette Mulaney and I'm a software engineer. I know I don't look it, but that's because they paid me to shower. I'm just kidding. We're all very cool and hygienic. I'm here today to talk to you about observability. What are my qualifications? Am I a 10X Rockstar Ninja Engineer? God, no. No. Absolutely not. Not even a little. Honestly, I'm more of a 1X. 1.5 on a good day. 0.7 if I'm a little hungover. Work hard, play hard. Point is, I'm a remarkably average and deeply adequate engineer, like most employees, but that's exactly who needs to troubleshoot apps. Normal humans. Ideally, unfortunately, the ability to glean insight from whatever Hodgepodge at stack of various products and in-house things is usually very concentrated. I'm talking relying on one person to solve the tricky issues, which is terrifying. The power can really go to their head. I've already promised a firstborn to get help before, and that's just not a scalable solution. Plus, what if that person leaves or dies? I mean, I'm sure it'll be fine. I'm sure our stack is completely and thoroughly documented and easily grasped by whoever needs to fill in. What is observability? Other than a buzzword I throw around in meetings and attempt to sound smart, open to limitry. High cardinality. Cloud native. Tail sampling. Are you even gonna put those into sentences? No. Observability is ultimately about answering simple questions. What's happening and why? Or, as we might phrase it during an incident call, what the hell is happening? It's 2 a.m. Dear God, why? In my experience, I usually try to answer these questions by desperately parsing too many logs, because I never actually got good at the proprietary query language of our service. And the logs themselves are deeply unhelpful. The tags return everything. I'm like, who set this up? Oh, I didn't. Huh. I should make that better. What if I added more tags, more logs? You know, I should probably add metrics and tracing to those logs. And you know what? More tags to those metrics. Okay, now I definitely need more dashboards and more alerts. But are there enough tags? And not to brag. But all this is costing the company a lot to ingest. Even though I don't even need most of this info anymore. But like, what am I gonna do? Remove it? I mean, who does that? Oh, excuse me. Don't worry, it's just another alert. I get them all the time. They'll be more of something's really going wrong. Plus, I'd have to wait for everyone to hop on the call before we can make any progress. I have time. Okay. I know it's 2AM. Let's get this over with so we can go back to bed. Okay, what's the issue? Bob has joined the meeting. Hi, Bob. Welcome. Mary has joined the meeting. Thanks for joining us, Mary. Bob, you're muted. Bob. Bob, you're muted. Bob, no one can hear you. Plus, everyone has their own tools, and so everyone has their own data. Since our tools don't speak to each other, we have to. And if there's one thing I love, it's stressed out troubleshooting. Although actually, it has been one of my more reliable forms of socializing during some of the bleaker parts of the last year. Oh, restart the note. Can't believe it and think of that. This is the third time this is happening this week and that. Crazy, right? This didn't need to be a call. Sure, Bob. Wasn't it kind of nice, but it was? Okay. Well, just try restarting it next time before hitting me up. HOTELY. Why don't you get a dog? Bye. Bye. I also tried to fill the void by bettering myself. A year ago, when I stopped commuting and my climbing gym closed, I resolved to dive deep into Kubernetes and finally understand it instead of silently praying to myself. And within a few weeks, I had completely given up on that resolution. But others have fared better. Observe, for example, has some pretty exciting updates to share.